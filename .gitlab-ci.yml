stages:
  - build
  - deploy

.build:
  stage: build
  script:
    - |
      set -x
      export WERF_REPO="${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}/${EXTERNAL_MODULES_MODULE_NAME}"
      export RELEASE_VERSION="$(grep -oP '^version:\s+\K(v[0-9]+\.[0-9]+\.[0-9]+[-_.a-z0-9]*)$' release.yaml)"

      werf build --report-path images_tags_werf.json
      cat images_tags_werf.json

      # Bundle image
      IMAGE_SRC="$(jq -r '.Images.bundle.DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}:${RELEASE_VERSION}
      docker image push ${REPO}:${RELEASE_VERSION}
      docker image rmi  ${REPO}:${RELEASE_VERSION} || true;

      # Release-channel image
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"
      REPO="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}/release:${RELEASE_VERSION}
      docker image push ${REPO}/release:${RELEASE_VERSION}
      docker image rmi  ${REPO}/release:${RELEASE_VERSION} || true;

      # Module images for dev
      if [[ "$ENV" == "dev" ]]; then
        for image in $(jq -r '.Images | keys[] | select(. | startswith("images/"))' images_tags_werf.json); do
          IMAGE_SRC="$(jq --arg i $image -r '.Images[$i].DockerImageName' images_tags_werf.json)"
          REPO="$(jq --arg i $image -r '.Images[$i].DockerRepo' images_tags_werf.json)"
          IMAGE_NAME=${image#"images/"}
          docker pull ${IMAGE_SRC}
          docker image tag ${IMAGE_SRC} ${REPO}/${IMAGE_NAME}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
          docker image push ${REPO}/${IMAGE_NAME}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
          docker image rmi  ${REPO}/${IMAGE_NAME}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} || true;
        done
      fi

      # Register module
      docker pull spotify/scratch
      docker image tag spotify/scratch:latest ${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}:${EXTERNAL_MODULES_MODULE_NAME}
      docker image push ${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}:${EXTERNAL_MODULES_MODULE_NAME}
      docker image rmi  ${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}:${EXTERNAL_MODULES_MODULE_NAME} || true
  tags:
    - tfprod-distributed-werf

before_script:
  - |
    type trdl && . $(trdl use werf 1.2 stable)
    type werf && source $(werf ci-env gitlab --as-file)
    # Login to the registry
    export DOCKER_CONFIG=$(mktemp -d)
    docker login ${EXTERNAL_MODULES_DEV_REGISTRY} -u ${EXTERNAL_MODULES_DEV_REGISTRY_LOGIN} -p ${EXTERNAL_MODULES_DEV_REGISTRY_PASSWORD}

Build Dev:
  stage: build
  extends: .build
  only:
  - merge_requests
  variables:
    EDITION: FE
    ENV: dev

Build EE:
  stage: build
  extends: .build
  only:
  - tags
  variables:
    EDITION: EE
    ENV: prod

Build FE:
  stage: build
  extends: .build
  only:
  - tags
  variables:
    EDITION: FE
    ENV: prod

Deploy Dev:
  stage: deploy
  script:
    - |
      export WERF_REPO="${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}/${EXTERNAL_MODULES_MODULE_NAME}"
      export RELEASE_VERSION="$(grep -oP '^version:\s+\K(v[0-9]+\.[0-9]+\.[0-9]+[-_.a-z0-9]*)$' release.yaml)"
      export CHANNEL="${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
      IMAGE_SRC="${WERF_REPO}/release:${RELEASE_VERSION}"
      IMAGE_DST="${WERF_REPO}/release:$CHANNEL"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  variables:
    EDITION: FE
  only:
  - merge_requests

Deploy Prod:
  stage: deploy
  script:
    - |
      export WERF_REPO="${EXTERNAL_MODULES_DEV_REGISTRY}/deckhouse/${EDITION,,}/${EXTERNAL_MODULES_DEV_REGISTRY_PATH}/${EXTERNAL_MODULES_MODULE_NAME}"
      export RELEASE_VERSION="$(grep -oP '^version:\s+\K(v[0-9]+\.[0-9]+\.[0-9]+[-_.a-z0-9]*)$' release.yaml)"
      IMAGE_SRC="${WERF_REPO}/release:${RELEASE_VERSION}"
      IMAGE_DST="${WERF_REPO}/release:$CHANNEL"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;
  tags:
    - tfprod-distributed-werf
  parallel:
    matrix:
      - EDITION: [FE, EE]
        CHANNEL: [alpha, beta, early-access, stable]
  when: manual
  only:
  - tags
