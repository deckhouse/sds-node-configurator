stages:
  - build
  - deploy_dev
  - deploy_prod

default:
  tags:
    - deckhouse

.registry-login: &registry-login
  - export DOCKER_CONFIG=$(mktemp -d)
  - docker login ${REGISTRY} -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD}
  - export WERF_REPO="${REGISTRY}/${REGISTRY_PATH}/${MODULE_NAME}"

before_script:
  - |
    type trdl && . $(trdl use werf 1.2 stable)
    type werf && source $(werf ci-env gitlab --as-file)

    if [[ ${MODULE_NAME} == "" ]]; then
      export MODULE_NAME=${CI_PROJECT_NAME};
    fi
    echo "Module name: ${MODULE_NAME}"

    # Hack to generate a tag for the dev version. Check if CI_COMMIT_REF_NAME matches semver. If not, we get the last tag via gitlab API, add the hash of the last commit to it and override CI_COMMIT_REF_NAME.
    export RELEASE_VERSION=$CI_COMMIT_REF_NAME

.build_script_dev:
  script:
    - *registry-login
    - |
      # Build

      export RELEASE_VERSION=pr${CI_MERGE_REQUEST_IID}

      CI_COMMIT_REF_NAME=${RELEASE_VERSION} werf build --save-build-report --build-report-path images_tags_werf.json

      # Bundle image ===========================================================

      # IMAGE_SRC registry.example.com/modules/sds-drbd:52cd3d08aded45c0ad260e8118b9e77a026c12a7def3ef7f9bd7bdb5-1691940564755
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"

      # REPO registry.example.com/modules/sds-drbd
      REPO="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json)"

      # registry.example.com/modules/sds-drbd:${RELEASE_VERSION}
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}:${RELEASE_VERSION}
      docker image push ${REPO}:${RELEASE_VERSION}
      docker image rmi ${REPO}:${RELEASE_VERSION} || true;

      cat << EOF
        Build version: ${RELEASE_VERSION}
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModuleSource
        metadata:
          name: ${MODULE_NAME}
        spec:
          releaseChannel: ${RELEASE_CHANNEL}
          registry:
            repo: ${REGISTRY}/${REGISTRY_PATH}
            dockerCfg: <base64 encoded credentials for ${REGISTRY}>
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModuleConfig
        metadata:
          name: ${MODULE_NAME}
        spec:
          enabled: true
          version: 1
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModulePullOverride
        metadata:
          name: ${MODULE_NAME}
        spec:
          imageTag: ${RELEASE_VERSION}
          scanInterval: 15s
          source: ${MODULE_NAME}
      EOF

.build_script:
  script:
    - *registry-login
    - |
      # Build

      CI_COMMIT_REF_NAME=${RELEASE_VERSION} werf build --save-build-report --build-report-path images_tags_werf.json

      # Bundle image ===========================================================

      # IMAGE_SRC registry.example.com/modules/sds-drbd:52cd3d08aded45c0ad260e8118b9e77a026c12a7def3ef7f9bd7bdb5-1691940564755
      IMAGE_SRC="$(jq -r '.Images."bundle".DockerImageName' images_tags_werf.json)"

      # REPO registry.example.com/modules/sds-drbd
      REPO="$(jq -r '.Images.bundle.DockerRepo' images_tags_werf.json)"

      # registry.example.com/modules/sds-drbd:${RELEASE_VERSION}
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}:${RELEASE_VERSION}
      docker image push ${REPO}:${RELEASE_VERSION}
      docker image rmi ${REPO}:${RELEASE_VERSION} || true;

      # Release-channel image ==================================================

      # IMAGE_SRC registry.example.com/modules/sds-drbd:0f6fe98c4087bddfb8c7afe262f0bc529c23c86a345db1de193f711f-1691937185066
      IMAGE_SRC="$(jq -r '.Images."release-channel-version".DockerImageName' images_tags_werf.json)"

      # REPO registry.example.com/modules/sds-drbd
      REPO="$(jq -r '.Images."release-channel-version".DockerRepo' images_tags_werf.json)"

      # registry.example.com/modules/sds-drbd/release:${RELEASE_VERSION}
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${REPO}/release:${RELEASE_VERSION}
      docker image push ${REPO}/release:${RELEASE_VERSION}
      docker image rmi ${REPO}/release:${RELEASE_VERSION} || true;

      # Register module ========================================================
      # registry.example.com/modules/sds-drbd
      docker pull spotify/scratch
      docker image tag spotify/scratch:latest ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image push ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME}
      docker image rmi ${REGISTRY}/${REGISTRY_PATH}:${MODULE_NAME} || true

.deploy_script:
  script:
    - *registry-login
    - |
      IMAGE_SRC="${WERF_REPO}/release:${RELEASE_VERSION}"
      IMAGE_DST="${WERF_REPO}/release:${RELEASE_CHANNEL}"
      docker pull ${IMAGE_SRC}
      docker image tag ${IMAGE_SRC} ${IMAGE_DST}
      docker image push ${IMAGE_DST}
      docker image rmi ${IMAGE_DST} || true;

      if [ $REGISTRY = "registry-write.deckhouse.io" ]; then
        REGISTRY="registry.deckhouse.io"
      fi  

      cat << EOF
        Build version: ${RELEASE_VERSION}
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModuleSource
        metadata:
          name: ${MODULE_NAME}
        spec:
          releaseChannel: ${RELEASE_CHANNEL}
          registry:
            repo: ${REGISTRY}/${REGISTRY_PATH}
            dockerCfg: <base64 encoded credentials for ${REGISTRY}>
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModuleConfig
        metadata:
          name: ${MODULE_NAME}
        spec:
          enabled: true
          version: 1
        ---
        apiVersion: deckhouse.io/v1alpha1
        kind: ModuleUpdatePolicy
        metadata:
          name: ${MODULE_NAME}
        spec:
          moduleReleaseSelector:
            labelSelector:
              matchLabels:
                module: ${MODULE_NAME}
                source: ${MODULE_NAME}
          releaseChannel: ${RELEASE_CHANNEL}
          update:
            mode: Auto      
      EOF

# PROD registry
.prod_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_REGISTRY}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_REGISTRY_PASSWORD}
    ENV: PROD

# DEV registry
.dev_vars:
  variables:
    REGISTRY: ${EXTERNAL_MODULES_DEV_REGISTRY}
    REGISTRY_PATH: ${EXTERNAL_MODULES_DEV_REGISTRY_PATH}
    REGISTRY_LOGIN: ${EXTERNAL_MODULES_DEV_REGISTRY_LOGIN}
    REGISTRY_PASSWORD: ${EXTERNAL_MODULES_DEV_REGISTRY_PASSWORD}
    ENV: DEV

.prod_rules:
  only:
    - tags
  except:
    - main
  when: manual

.dev_rules:
  only:
    - merge_requests
  except:
    - main
  when: always

.prod:
  extends:
    - .prod_vars
    - .prod_rules

.dev:
  extends:
    - .dev_vars
    - .dev_rules

build_prod_ce:
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_CE}
  stage: build
  extends:
    - .prod
    - .build_script
  when: manual

build_prod_ee:
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_EE}
  stage: build
  extends:
    - .prod
    - .build_script
  when: manual

build_prod_fe:
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_FE}
  stage: build
  extends:
    - .prod
    - .build_script
  when: manual

build_dev:
  stage: build
  extends:
    - .dev
    - .build_script_dev

deploy_ce:
  stage: deploy_prod
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_CE}
  needs:
    - build_prod_ce
  extends:
    - .prod
    - .deploy_script
  when:
    manual
  parallel:
    matrix:
      - RELEASE_CHANNEL:
        - alpha
        - beta
        - early-access
        - stable
        - rock-solid

deploy_ee:
  stage: deploy_prod
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_EE}
  needs:
    - build_prod_ee
  extends:
    - .prod
    - .deploy_script
  when:
    manual
  parallel:
    matrix:
      - RELEASE_CHANNEL:
        - alpha
        - beta
        - early-access
        - stable
        - rock-solid

deploy_fe:
  stage: deploy_prod
  variables:
    REGISTRY_PATH: ${EXTERNAL_MODULES_REGISTRY_PATH_FE}
  needs:
    - build_prod_fe
  extends:
    - .prod
    - .deploy_script
  when:
    manual
  parallel:
    matrix:
      - RELEASE_CHANNEL:
        - alpha
        - beta
        - early-access
        - stable
        - rock-solid
