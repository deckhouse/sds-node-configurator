{{ $binaries := "/sds-utils/bin/lvm.static /sds-utils/bin/dmsetup.static /sds-utils/lib/libudev.so.1 /sds-utils/lib/libgcc_s.so.1 /sds-utils/lib/libm.so.6 /sds-utils/lib/libc.so.6 /sds-utils/lib/ld-linux-x86-64.so.2 /sds-utils/bin/thin_dump /sds-utils/bin/pdata_tools" }}

# Do not remove. It's used in external tests.
---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
fromImage: builder/src
final: false

git:
  - add: {{ .ModuleDir }}
    to: /src
    includePaths:
      - api
      - lib/go
      - images/{{ $.ImageName }}
    stageDependencies:
      install:
        - '**/*'
    excludePaths:
      - images/{{ $.ImageName }}/werf.yaml

secrets:
- id: SOURCE_REPO
  value: {{ .SOURCE_REPO }}

shell:
  install:
    - git config --global advice.detachedHead false
    - git clone --depth 1 $(cat /run/secrets/SOURCE_REPO)/lvmteam/lvm2.git /src/lvm2
    - cd /src/lvm2
    - git fetch --depth 1 origin {{ .Versions.LVM2 }}
    - rm -rf /src/lvm2/.git

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
fromImage: {{ eq $.Constants.SVACE_ENABLED "false" | ternary "builder/alt" "builder/alt-go-svace" }}
final: false

import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
    add: /src
    to: /src
    before: install

git:
  - add: {{ .ModuleDir }}/tools/dev_images/additional_tools/binary_replace.sh
    to: /binary_replace.sh
    stageDependencies:
      install:
        - "**/*"

shell:
  install:
    {{- include "alt packages proxy" . | nindent 4 }}
    - apt-get update
    - |
      apt-get install -y \
      build-essential \
      autoconf \
      automake \
      libtool \
      pkg-config \
      libdevmapper-devel \
      libaio-devel-static \
      libblkid-devel-static \
      thin-provisioning-tools \
      glibc-core \
      cross-glibc-x86_64
    - cd /src/lvm2
    - ./configure --enable-static_link --disable-silent-rules --disable-readline --enable-blkid_wiping --build=x86_64-linux-gnu
    - |
      {{- include "image-build.build" (set $ "BuildCommand" (printf "make")) | nindent 6 }}
    - mkdir -p /sds-utils/bin/
    - mv /src/lvm2/tools/lvm.static /sds-utils/bin/lvm.static
    - mv /src/lvm2/libdm/dm-tools/dmsetup.static /sds-utils/bin/dmsetup.static
    - cp /usr/sbin/{thin_dump,pdata_tools} /sds-utils/bin/
    - mkdir -p /sds-utils/lib/
    - cp /lib64/{libudev.so.1,libgcc_s.so.1,libm.so.6,libc.so.6} /sds-utils/lib/
    - cp /usr/lib/x86_64-linux-gnu/sys-root/lib64/ld-linux-x86-64.so.2 /sds-utils/lib/
    - chmod +x /binary_replace.sh
    - /binary_replace.sh -i "{{ $binaries }}" -o /relocate

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
fromImage: {{ eq $.Constants.SVACE_ENABLED "false" | ternary "builder/golang-alpine" "builder/alt-go-svace" }}
final: false

import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-src-artifact
    add: /src
    to: /src
    before: install

mount:
{{ include "mount points for golang builds" . }}

secrets:
- id: GOPROXY
  value: {{ .GOPROXY }}

shell:
  setup:
    - cd /src/images/{{ $.ImageName }}/cmd
    - GOPROXY=$(cat /run/secrets/GOPROXY) go mod download
    - export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
    - |
      {{- include "image-build.build" (set $ "BuildCommand" (printf `go build -ldflags="-s -w" -tags "%s" -o /%s` .MODULE_EDITION $.ImageName)) | nindent 6 }}
    - chmod +x /{{ $.ImageName }}

---
image: {{ .ModuleNamePrefix }}{{ .ImageName }}
fromImage: base/distroless
import:
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-binaries-artifact
    add: /relocate
    to: /
    before: setup
  - image: {{ .ModuleNamePrefix }}{{ .ImageName }}-golang-artifact
    add: /{{ $.ImageName }}
    to: /{{ $.ImageName }}
    before: setup

imageSpec:
  config:
    entrypoint: ["/{{ $.ImageName }}"]
