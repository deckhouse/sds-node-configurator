// Code generated by MockGen. DO NOT EDIT.
// Source: commands.go
//
// Generated by this command:
//
//	mockgen -write_source_comment -destination=../mock_utils/commands.go -source=commands.go
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	bytes "bytes"
	context "context"
	reflect "reflect"

	internal "github.com/deckhouse/sds-node-configurator/images/agent/internal"
	logger "github.com/deckhouse/sds-node-configurator/images/agent/internal/logger"
	monitoring "github.com/deckhouse/sds-node-configurator/images/agent/internal/monitoring"
	gomock "go.uber.org/mock/gomock"
)

// MockCommands is a mock of Commands interface.
type MockCommands struct {
	ctrl     *gomock.Controller
	recorder *MockCommandsMockRecorder
	isgomock struct{}
}

// MockCommandsMockRecorder is the mock recorder for MockCommands.
type MockCommandsMockRecorder struct {
	mock *MockCommands
}

// NewMockCommands creates a new mock instance.
func NewMockCommands(ctrl *gomock.Controller) *MockCommands {
	mock := &MockCommands{ctrl: ctrl}
	mock.recorder = &MockCommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommands) EXPECT() *MockCommandsMockRecorder {
	return m.recorder
}

// CreatePV mocks base method.
func (m *MockCommands) CreatePV(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePV", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePV indicates an expected call of CreatePV.
func (mr *MockCommandsMockRecorder) CreatePV(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePV", reflect.TypeOf((*MockCommands)(nil).CreatePV), path)
}

// CreateThickLogicalVolume mocks base method.
func (m *MockCommands) CreateThickLogicalVolume(vgName, lvName string, size int64, contiguous bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThickLogicalVolume", vgName, lvName, size, contiguous)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThickLogicalVolume indicates an expected call of CreateThickLogicalVolume.
func (mr *MockCommandsMockRecorder) CreateThickLogicalVolume(vgName, lvName, size, contiguous any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThickLogicalVolume", reflect.TypeOf((*MockCommands)(nil).CreateThickLogicalVolume), vgName, lvName, size, contiguous)
}

// CreateThinLogicalVolume mocks base method.
func (m *MockCommands) CreateThinLogicalVolume(vgName, tpName, lvName string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolume", vgName, tpName, lvName, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolume indicates an expected call of CreateThinLogicalVolume.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolume(vgName, tpName, lvName, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolume", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolume), vgName, tpName, lvName, size)
}

// CreateThinLogicalVolumeFromSource mocks base method.
func (m *MockCommands) CreateThinLogicalVolumeFromSource(name, sourceVgName, sourceName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolumeFromSource", name, sourceVgName, sourceName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolumeFromSource indicates an expected call of CreateThinLogicalVolumeFromSource.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolumeFromSource(name, sourceVgName, sourceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolumeFromSource", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolumeFromSource), name, sourceVgName, sourceName)
}

// CreateThinLogicalVolumeSnapshot mocks base method.
func (m *MockCommands) CreateThinLogicalVolumeSnapshot(name, sourceVgName, sourceName string, tags []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolumeSnapshot", name, sourceVgName, sourceName, tags)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolumeSnapshot indicates an expected call of CreateThinLogicalVolumeSnapshot.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolumeSnapshot(name, sourceVgName, sourceName, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolumeSnapshot", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolumeSnapshot), name, sourceVgName, sourceName, tags)
}

// CreateThinPool mocks base method.
func (m *MockCommands) CreateThinPool(thinPoolName, vgName string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinPool", thinPoolName, vgName, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinPool indicates an expected call of CreateThinPool.
func (mr *MockCommandsMockRecorder) CreateThinPool(thinPoolName, vgName, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinPool", reflect.TypeOf((*MockCommands)(nil).CreateThinPool), thinPoolName, vgName, size)
}

// CreateThinPoolFullVGSpace mocks base method.
func (m *MockCommands) CreateThinPoolFullVGSpace(thinPoolName, vgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinPoolFullVGSpace", thinPoolName, vgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinPoolFullVGSpace indicates an expected call of CreateThinPoolFullVGSpace.
func (mr *MockCommandsMockRecorder) CreateThinPoolFullVGSpace(thinPoolName, vgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinPoolFullVGSpace", reflect.TypeOf((*MockCommands)(nil).CreateThinPoolFullVGSpace), thinPoolName, vgName)
}

// CreateVGLocal mocks base method.
func (m *MockCommands) CreateVGLocal(vgName, lvmVolumeGroupName string, pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVGLocal", vgName, lvmVolumeGroupName, pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVGLocal indicates an expected call of CreateVGLocal.
func (mr *MockCommandsMockRecorder) CreateVGLocal(vgName, lvmVolumeGroupName, pvNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVGLocal", reflect.TypeOf((*MockCommands)(nil).CreateVGLocal), vgName, lvmVolumeGroupName, pvNames)
}

// CreateVGShared mocks base method.
func (m *MockCommands) CreateVGShared(vgName, lvmVolumeGroupName string, pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVGShared", vgName, lvmVolumeGroupName, pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVGShared indicates an expected call of CreateVGShared.
func (mr *MockCommandsMockRecorder) CreateVGShared(vgName, lvmVolumeGroupName, pvNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVGShared", reflect.TypeOf((*MockCommands)(nil).CreateVGShared), vgName, lvmVolumeGroupName, pvNames)
}

// ExtendLV mocks base method.
func (m *MockCommands) ExtendLV(size int64, vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLV", size, vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendLV indicates an expected call of ExtendLV.
func (mr *MockCommandsMockRecorder) ExtendLV(size, vgName, lvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLV", reflect.TypeOf((*MockCommands)(nil).ExtendLV), size, vgName, lvName)
}

// ExtendLVFullVGSpace mocks base method.
func (m *MockCommands) ExtendLVFullVGSpace(vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLVFullVGSpace", vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendLVFullVGSpace indicates an expected call of ExtendLVFullVGSpace.
func (mr *MockCommandsMockRecorder) ExtendLVFullVGSpace(vgName, lvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLVFullVGSpace", reflect.TypeOf((*MockCommands)(nil).ExtendLVFullVGSpace), vgName, lvName)
}

// ExtendVG mocks base method.
func (m *MockCommands) ExtendVG(vgName string, paths []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendVG", vgName, paths)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVG indicates an expected call of ExtendVG.
func (mr *MockCommandsMockRecorder) ExtendVG(vgName, paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVG", reflect.TypeOf((*MockCommands)(nil).ExtendVG), vgName, paths)
}

// GetAllLVs mocks base method.
func (m *MockCommands) GetAllLVs(ctx context.Context) ([]internal.LVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLVs", ctx)
	ret0, _ := ret[0].([]internal.LVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllLVs indicates an expected call of GetAllLVs.
func (mr *MockCommandsMockRecorder) GetAllLVs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLVs", reflect.TypeOf((*MockCommands)(nil).GetAllLVs), ctx)
}

// GetAllPVs mocks base method.
func (m *MockCommands) GetAllPVs(ctx context.Context) ([]internal.PVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVs", ctx)
	ret0, _ := ret[0].([]internal.PVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllPVs indicates an expected call of GetAllPVs.
func (mr *MockCommandsMockRecorder) GetAllPVs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVs", reflect.TypeOf((*MockCommands)(nil).GetAllPVs), ctx)
}

// GetAllVGs mocks base method.
func (m *MockCommands) GetAllVGs(ctx context.Context) ([]internal.VGData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVGs", ctx)
	ret0, _ := ret[0].([]internal.VGData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllVGs indicates an expected call of GetAllVGs.
func (mr *MockCommandsMockRecorder) GetAllVGs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVGs", reflect.TypeOf((*MockCommands)(nil).GetAllVGs), ctx)
}

// GetBlockDevices mocks base method.
func (m *MockCommands) GetBlockDevices(ctx context.Context) ([]internal.Device, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevices", ctx)
	ret0, _ := ret[0].([]internal.Device)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetBlockDevices indicates an expected call of GetBlockDevices.
func (mr *MockCommandsMockRecorder) GetBlockDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevices", reflect.TypeOf((*MockCommands)(nil).GetBlockDevices), ctx)
}

// GetLV mocks base method.
func (m *MockCommands) GetLV(vgName, lvName string) (internal.LVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLV", vgName, lvName)
	ret0, _ := ret[0].(internal.LVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetLV indicates an expected call of GetLV.
func (mr *MockCommandsMockRecorder) GetLV(vgName, lvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLV", reflect.TypeOf((*MockCommands)(nil).GetLV), vgName, lvName)
}

// GetPV mocks base method.
func (m *MockCommands) GetPV(pvName string) (internal.PVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPV", pvName)
	ret0, _ := ret[0].(internal.PVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPV indicates an expected call of GetPV.
func (mr *MockCommandsMockRecorder) GetPV(pvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPV", reflect.TypeOf((*MockCommands)(nil).GetPV), pvName)
}

// GetVG mocks base method.
func (m *MockCommands) GetVG(vgName string) (internal.VGData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVG", vgName)
	ret0, _ := ret[0].(internal.VGData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetVG indicates an expected call of GetVG.
func (mr *MockCommandsMockRecorder) GetVG(vgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVG", reflect.TypeOf((*MockCommands)(nil).GetVG), vgName)
}

// LVChangeDelTag mocks base method.
func (m *MockCommands) LVChangeDelTag(lv internal.LVData, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LVChangeDelTag", lv, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LVChangeDelTag indicates an expected call of LVChangeDelTag.
func (mr *MockCommandsMockRecorder) LVChangeDelTag(lv, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LVChangeDelTag", reflect.TypeOf((*MockCommands)(nil).LVChangeDelTag), lv, tag)
}

// ReTag mocks base method.
func (m *MockCommands) ReTag(ctx context.Context, log logger.Logger, metrics monitoring.Metrics, ctrlName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReTag", ctx, log, metrics, ctrlName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReTag indicates an expected call of ReTag.
func (mr *MockCommandsMockRecorder) ReTag(ctx, log, metrics, ctrlName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReTag", reflect.TypeOf((*MockCommands)(nil).ReTag), ctx, log, metrics, ctrlName)
}

// RemoveLV mocks base method.
func (m *MockCommands) RemoveLV(vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLV", vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLV indicates an expected call of RemoveLV.
func (mr *MockCommandsMockRecorder) RemoveLV(vgName, lvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLV", reflect.TypeOf((*MockCommands)(nil).RemoveLV), vgName, lvName)
}

// RemovePV mocks base method.
func (m *MockCommands) RemovePV(pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePV", pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePV indicates an expected call of RemovePV.
func (mr *MockCommandsMockRecorder) RemovePV(pvNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePV", reflect.TypeOf((*MockCommands)(nil).RemovePV), pvNames)
}

// RemoveVG mocks base method.
func (m *MockCommands) RemoveVG(vgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVG", vgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVG indicates an expected call of RemoveVG.
func (mr *MockCommandsMockRecorder) RemoveVG(vgName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVG", reflect.TypeOf((*MockCommands)(nil).RemoveVG), vgName)
}

// ResizePV mocks base method.
func (m *MockCommands) ResizePV(pvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizePV", pvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizePV indicates an expected call of ResizePV.
func (mr *MockCommandsMockRecorder) ResizePV(pvName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizePV", reflect.TypeOf((*MockCommands)(nil).ResizePV), pvName)
}

// UnmarshalDevices mocks base method.
func (m *MockCommands) UnmarshalDevices(out []byte) ([]internal.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalDevices", out)
	ret0, _ := ret[0].([]internal.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalDevices indicates an expected call of UnmarshalDevices.
func (mr *MockCommandsMockRecorder) UnmarshalDevices(out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalDevices", reflect.TypeOf((*MockCommands)(nil).UnmarshalDevices), out)
}

// VGChangeAddTag mocks base method.
func (m *MockCommands) VGChangeAddTag(vGName, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGChangeAddTag", vGName, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VGChangeAddTag indicates an expected call of VGChangeAddTag.
func (mr *MockCommandsMockRecorder) VGChangeAddTag(vGName, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGChangeAddTag", reflect.TypeOf((*MockCommands)(nil).VGChangeAddTag), vGName, tag)
}

// VGChangeDelTag mocks base method.
func (m *MockCommands) VGChangeDelTag(vGName, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGChangeDelTag", vGName, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VGChangeDelTag indicates an expected call of VGChangeDelTag.
func (mr *MockCommandsMockRecorder) VGChangeDelTag(vGName, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGChangeDelTag", reflect.TypeOf((*MockCommands)(nil).VGChangeDelTag), vGName, tag)
}
