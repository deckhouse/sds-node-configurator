// /*
// Copyright 2025 Flant JSC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by MockGen. DO NOT EDIT.
// Source: syscall.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../../hack/boilerplate.txt -write_source_comment -destination=../mock_utils/syscall.go -source=syscall.go
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	utils "github.com/deckhouse/sds-node-configurator/images/agent/internal/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockSysCall is a mock of SysCall interface.
type MockSysCall struct {
	ctrl     *gomock.Controller
	recorder *MockSysCallMockRecorder
	isgomock struct{}
}

// MockSysCallMockRecorder is the mock recorder for MockSysCall.
type MockSysCallMockRecorder struct {
	mock *MockSysCall
}

// NewMockSysCall creates a new mock instance.
func NewMockSysCall(ctrl *gomock.Controller) *MockSysCall {
	mock := &MockSysCall{ctrl: ctrl}
	mock.recorder = &MockSysCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysCall) EXPECT() *MockSysCallMockRecorder {
	return m.recorder
}

// Blkdiscard mocks base method.
func (m *MockSysCall) Blkdiscard(fd uintptr, start, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blkdiscard", fd, start, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blkdiscard indicates an expected call of Blkdiscard.
func (mr *MockSysCallMockRecorder) Blkdiscard(fd, start, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blkdiscard", reflect.TypeOf((*MockSysCall)(nil).Blkdiscard), fd, start, count)
}

// Fstat mocks base method.
func (m *MockSysCall) Fstat(fd int, stat *utils.Stat_t) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fstat", fd, stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fstat indicates an expected call of Fstat.
func (mr *MockSysCallMockRecorder) Fstat(fd, stat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fstat", reflect.TypeOf((*MockSysCall)(nil).Fstat), fd, stat)
}

// Syscall mocks base method.
func (m *MockSysCall) Syscall(trap, a1, a2, a3 uintptr) (uintptr, uintptr, utils.Errno) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syscall", trap, a1, a2, a3)
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(uintptr)
	ret2, _ := ret[2].(utils.Errno)
	return ret0, ret1, ret2
}

// Syscall indicates an expected call of Syscall.
func (mr *MockSysCallMockRecorder) Syscall(trap, a1, a2, a3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syscall", reflect.TypeOf((*MockSysCall)(nil).Syscall), trap, a1, a2, a3)
}
