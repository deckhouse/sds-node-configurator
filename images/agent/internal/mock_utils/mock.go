// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deckhouse/sds-node-configurator/images/agent/internal/utils (interfaces: SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener,Commands)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -typed github.com/deckhouse/sds-node-configurator/images/agent/internal/utils SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener,Commands
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	bytes "bytes"
	context "context"
	fs "io/fs"
	reflect "reflect"
	syscall "syscall"

	internal "github.com/deckhouse/sds-node-configurator/images/agent/internal"
	logger "github.com/deckhouse/sds-node-configurator/images/agent/internal/logger"
	monitoring "github.com/deckhouse/sds-node-configurator/images/agent/internal/monitoring"
	utils "github.com/deckhouse/sds-node-configurator/images/agent/internal/utils"
	gomock "go.uber.org/mock/gomock"
	unix "golang.org/x/sys/unix"
)

//go:generate mockgen -write_generate_directive -typed github.com/deckhouse/sds-node-configurator/images/agent/internal/utils SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener,Commands

// MockSysCall is a mock of SysCall interface.
type MockSysCall struct {
	ctrl     *gomock.Controller
	recorder *MockSysCallMockRecorder
	isgomock struct{}
}

// MockSysCallMockRecorder is the mock recorder for MockSysCall.
type MockSysCallMockRecorder struct {
	mock *MockSysCall
}

// NewMockSysCall creates a new mock instance.
func NewMockSysCall(ctrl *gomock.Controller) *MockSysCall {
	mock := &MockSysCall{ctrl: ctrl}
	mock.recorder = &MockSysCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysCall) EXPECT() *MockSysCallMockRecorder {
	return m.recorder
}

// Blkdiscard mocks base method.
func (m *MockSysCall) Blkdiscard(fd uintptr, start, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blkdiscard", fd, start, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blkdiscard indicates an expected call of Blkdiscard.
func (mr *MockSysCallMockRecorder) Blkdiscard(fd, start, count any) *MockSysCallBlkdiscardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blkdiscard", reflect.TypeOf((*MockSysCall)(nil).Blkdiscard), fd, start, count)
	return &MockSysCallBlkdiscardCall{Call: call}
}

// MockSysCallBlkdiscardCall wrap *gomock.Call
type MockSysCallBlkdiscardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSysCallBlkdiscardCall) Return(arg0 error) *MockSysCallBlkdiscardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSysCallBlkdiscardCall) Do(f func(uintptr, uint64, uint64) error) *MockSysCallBlkdiscardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSysCallBlkdiscardCall) DoAndReturn(f func(uintptr, uint64, uint64) error) *MockSysCallBlkdiscardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fstat mocks base method.
func (m *MockSysCall) Fstat(fd int, stat *unix.Stat_t) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fstat", fd, stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fstat indicates an expected call of Fstat.
func (mr *MockSysCallMockRecorder) Fstat(fd, stat any) *MockSysCallFstatCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fstat", reflect.TypeOf((*MockSysCall)(nil).Fstat), fd, stat)
	return &MockSysCallFstatCall{Call: call}
}

// MockSysCallFstatCall wrap *gomock.Call
type MockSysCallFstatCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSysCallFstatCall) Return(err error) *MockSysCallFstatCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSysCallFstatCall) Do(f func(int, *unix.Stat_t) error) *MockSysCallFstatCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSysCallFstatCall) DoAndReturn(f func(int, *unix.Stat_t) error) *MockSysCallFstatCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Syscall mocks base method.
func (m *MockSysCall) Syscall(trap, a1, a2, a3 uintptr) (uintptr, uintptr, syscall.Errno) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syscall", trap, a1, a2, a3)
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(uintptr)
	ret2, _ := ret[2].(syscall.Errno)
	return ret0, ret1, ret2
}

// Syscall indicates an expected call of Syscall.
func (mr *MockSysCallMockRecorder) Syscall(trap, a1, a2, a3 any) *MockSysCallSyscallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syscall", reflect.TypeOf((*MockSysCall)(nil).Syscall), trap, a1, a2, a3)
	return &MockSysCallSyscallCall{Call: call}
}

// MockSysCallSyscallCall wrap *gomock.Call
type MockSysCallSyscallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSysCallSyscallCall) Return(r1, r2 uintptr, err syscall.Errno) *MockSysCallSyscallCall {
	c.Call = c.Call.Return(r1, r2, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSysCallSyscallCall) Do(f func(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, syscall.Errno)) *MockSysCallSyscallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSysCallSyscallCall) DoAndReturn(f func(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, syscall.Errno)) *MockSysCallSyscallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDevice is a mock of BlockDevice interface.
type MockBlockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceMockRecorder
	isgomock struct{}
}

// MockBlockDeviceMockRecorder is the mock recorder for MockBlockDevice.
type MockBlockDeviceMockRecorder struct {
	mock *MockBlockDevice
}

// NewMockBlockDevice creates a new mock instance.
func NewMockBlockDevice(ctrl *gomock.Controller) *MockBlockDevice {
	mock := &MockBlockDevice{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDevice) EXPECT() *MockBlockDeviceMockRecorder {
	return m.recorder
}

// BlockSize mocks base method.
func (m *MockBlockDevice) BlockSize() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockSize")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockSize indicates an expected call of BlockSize.
func (mr *MockBlockDeviceMockRecorder) BlockSize() *MockBlockDeviceBlockSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSize", reflect.TypeOf((*MockBlockDevice)(nil).BlockSize))
	return &MockBlockDeviceBlockSizeCall{Call: call}
}

// MockBlockDeviceBlockSizeCall wrap *gomock.Call
type MockBlockDeviceBlockSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceBlockSizeCall) Return(arg0 int, arg1 error) *MockBlockDeviceBlockSizeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceBlockSizeCall) Do(f func() (int, error)) *MockBlockDeviceBlockSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceBlockSizeCall) DoAndReturn(f func() (int, error)) *MockBlockDeviceBlockSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockBlockDevice) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlockDeviceMockRecorder) Close() *MockBlockDeviceCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockDevice)(nil).Close))
	return &MockBlockDeviceCloseCall{Call: call}
}

// MockBlockDeviceCloseCall wrap *gomock.Call
type MockBlockDeviceCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceCloseCall) Return(arg0 error) *MockBlockDeviceCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceCloseCall) Do(f func() error) *MockBlockDeviceCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceCloseCall) DoAndReturn(f func() error) *MockBlockDeviceCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Discard mocks base method.
func (m *MockBlockDevice) Discard(start, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", start, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockBlockDeviceMockRecorder) Discard(start, count any) *MockBlockDeviceDiscardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockBlockDevice)(nil).Discard), start, count)
	return &MockBlockDeviceDiscardCall{Call: call}
}

// MockBlockDeviceDiscardCall wrap *gomock.Call
type MockBlockDeviceDiscardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceDiscardCall) Return(arg0 error) *MockBlockDeviceDiscardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceDiscardCall) Do(f func(uint64, uint64) error) *MockBlockDeviceDiscardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceDiscardCall) DoAndReturn(f func(uint64, uint64) error) *MockBlockDeviceDiscardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fd mocks base method.
func (m *MockBlockDevice) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockBlockDeviceMockRecorder) Fd() *MockBlockDeviceFdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockBlockDevice)(nil).Fd))
	return &MockBlockDeviceFdCall{Call: call}
}

// MockBlockDeviceFdCall wrap *gomock.Call
type MockBlockDeviceFdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceFdCall) Return(arg0 uintptr) *MockBlockDeviceFdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceFdCall) Do(f func() uintptr) *MockBlockDeviceFdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceFdCall) DoAndReturn(f func() uintptr) *MockBlockDeviceFdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockBlockDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBlockDeviceMockRecorder) Name() *MockBlockDeviceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBlockDevice)(nil).Name))
	return &MockBlockDeviceNameCall{Call: call}
}

// MockBlockDeviceNameCall wrap *gomock.Call
type MockBlockDeviceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceNameCall) Return(arg0 string) *MockBlockDeviceNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceNameCall) Do(f func() string) *MockBlockDeviceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceNameCall) DoAndReturn(f func() string) *MockBlockDeviceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockBlockDevice) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBlockDeviceMockRecorder) Read(p any) *MockBlockDeviceReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBlockDevice)(nil).Read), p)
	return &MockBlockDeviceReadCall{Call: call}
}

// MockBlockDeviceReadCall wrap *gomock.Call
type MockBlockDeviceReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceReadCall) Return(n int, err error) *MockBlockDeviceReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceReadCall) Do(f func([]byte) (int, error)) *MockBlockDeviceReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceReadCall) DoAndReturn(f func([]byte) (int, error)) *MockBlockDeviceReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAt mocks base method.
func (m *MockBlockDevice) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockBlockDeviceMockRecorder) ReadAt(p, off any) *MockBlockDeviceReadAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockBlockDevice)(nil).ReadAt), p, off)
	return &MockBlockDeviceReadAtCall{Call: call}
}

// MockBlockDeviceReadAtCall wrap *gomock.Call
type MockBlockDeviceReadAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceReadAtCall) Return(n int, err error) *MockBlockDeviceReadAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceReadAtCall) Do(f func([]byte, int64) (int, error)) *MockBlockDeviceReadAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceReadAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockBlockDeviceReadAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockBlockDevice) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockBlockDeviceMockRecorder) Seek(offset, whence any) *MockBlockDeviceSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockBlockDevice)(nil).Seek), offset, whence)
	return &MockBlockDeviceSeekCall{Call: call}
}

// MockBlockDeviceSeekCall wrap *gomock.Call
type MockBlockDeviceSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceSeekCall) Return(arg0 int64, arg1 error) *MockBlockDeviceSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceSeekCall) Do(f func(int64, int) (int64, error)) *MockBlockDeviceSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockBlockDeviceSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Size mocks base method.
func (m *MockBlockDevice) Size() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockBlockDeviceMockRecorder) Size() *MockBlockDeviceSizeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBlockDevice)(nil).Size))
	return &MockBlockDeviceSizeCall{Call: call}
}

// MockBlockDeviceSizeCall wrap *gomock.Call
type MockBlockDeviceSizeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceSizeCall) Return(arg0 int64, arg1 error) *MockBlockDeviceSizeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceSizeCall) Do(f func() (int64, error)) *MockBlockDeviceSizeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceSizeCall) DoAndReturn(f func() (int64, error)) *MockBlockDeviceSizeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteAt mocks base method.
func (m *MockBlockDevice) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockBlockDeviceMockRecorder) WriteAt(p, off any) *MockBlockDeviceWriteAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockBlockDevice)(nil).WriteAt), p, off)
	return &MockBlockDeviceWriteAtCall{Call: call}
}

// MockBlockDeviceWriteAtCall wrap *gomock.Call
type MockBlockDeviceWriteAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceWriteAtCall) Return(n int, err error) *MockBlockDeviceWriteAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceWriteAtCall) Do(f func([]byte, int64) (int, error)) *MockBlockDeviceWriteAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceWriteAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockBlockDeviceWriteAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *MockFileCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
	return &MockFileCloseCall{Call: call}
}

// MockFileCloseCall wrap *gomock.Call
type MockFileCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileCloseCall) Return(arg0 error) *MockFileCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileCloseCall) Do(f func() error) *MockFileCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileCloseCall) DoAndReturn(f func() error) *MockFileCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Fd mocks base method.
func (m *MockFile) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockFileMockRecorder) Fd() *MockFileFdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockFile)(nil).Fd))
	return &MockFileFdCall{Call: call}
}

// MockFileFdCall wrap *gomock.Call
type MockFileFdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileFdCall) Return(arg0 uintptr) *MockFileFdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileFdCall) Do(f func() uintptr) *MockFileFdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileFdCall) DoAndReturn(f func() uintptr) *MockFileFdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *MockFileNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
	return &MockFileNameCall{Call: call}
}

// MockFileNameCall wrap *gomock.Call
type MockFileNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileNameCall) Return(arg0 string) *MockFileNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileNameCall) Do(f func() string) *MockFileNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileNameCall) DoAndReturn(f func() string) *MockFileNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(p any) *MockFileReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), p)
	return &MockFileReadCall{Call: call}
}

// MockFileReadCall wrap *gomock.Call
type MockFileReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReadCall) Return(n int, err error) *MockFileReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReadCall) Do(f func([]byte) (int, error)) *MockFileReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReadCall) DoAndReturn(f func([]byte) (int, error)) *MockFileReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAt mocks base method.
func (m *MockFile) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockFileMockRecorder) ReadAt(p, off any) *MockFileReadAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), p, off)
	return &MockFileReadAtCall{Call: call}
}

// MockFileReadAtCall wrap *gomock.Call
type MockFileReadAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileReadAtCall) Return(n int, err error) *MockFileReadAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileReadAtCall) Do(f func([]byte, int64) (int, error)) *MockFileReadAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileReadAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockFileReadAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Seek mocks base method.
func (m *MockFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileMockRecorder) Seek(offset, whence any) *MockFileSeekCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), offset, whence)
	return &MockFileSeekCall{Call: call}
}

// MockFileSeekCall wrap *gomock.Call
type MockFileSeekCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSeekCall) Return(arg0 int64, arg1 error) *MockFileSeekCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSeekCall) Do(f func(int64, int) (int64, error)) *MockFileSeekCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSeekCall) DoAndReturn(f func(int64, int) (int64, error)) *MockFileSeekCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteAt mocks base method.
func (m *MockFile) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockFileMockRecorder) WriteAt(p, off any) *MockFileWriteAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), p, off)
	return &MockFileWriteAtCall{Call: call}
}

// MockFileWriteAtCall wrap *gomock.Call
type MockFileWriteAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileWriteAtCall) Return(n int, err error) *MockFileWriteAtCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileWriteAtCall) Do(f func([]byte, int64) (int, error)) *MockFileWriteAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileWriteAtCall) DoAndReturn(f func([]byte, int64) (int, error)) *MockFileWriteAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileOpener is a mock of FileOpener interface.
type MockFileOpener struct {
	ctrl     *gomock.Controller
	recorder *MockFileOpenerMockRecorder
	isgomock struct{}
}

// MockFileOpenerMockRecorder is the mock recorder for MockFileOpener.
type MockFileOpenerMockRecorder struct {
	mock *MockFileOpener
}

// NewMockFileOpener creates a new mock instance.
func NewMockFileOpener(ctrl *gomock.Controller) *MockFileOpener {
	mock := &MockFileOpener{ctrl: ctrl}
	mock.recorder = &MockFileOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOpener) EXPECT() *MockFileOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockFileOpener) Open(name string, flag int, mode fs.FileMode) (utils.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name, flag, mode)
	ret0, _ := ret[0].(utils.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileOpenerMockRecorder) Open(name, flag, mode any) *MockFileOpenerOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileOpener)(nil).Open), name, flag, mode)
	return &MockFileOpenerOpenCall{Call: call}
}

// MockFileOpenerOpenCall wrap *gomock.Call
type MockFileOpenerOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileOpenerOpenCall) Return(arg0 utils.File, arg1 error) *MockFileOpenerOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileOpenerOpenCall) Do(f func(string, int, fs.FileMode) (utils.File, error)) *MockFileOpenerOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileOpenerOpenCall) DoAndReturn(f func(string, int, fs.FileMode) (utils.File, error)) *MockFileOpenerOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlockDeviceOpener is a mock of BlockDeviceOpener interface.
type MockBlockDeviceOpener struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceOpenerMockRecorder
	isgomock struct{}
}

// MockBlockDeviceOpenerMockRecorder is the mock recorder for MockBlockDeviceOpener.
type MockBlockDeviceOpenerMockRecorder struct {
	mock *MockBlockDeviceOpener
}

// NewMockBlockDeviceOpener creates a new mock instance.
func NewMockBlockDeviceOpener(ctrl *gomock.Controller) *MockBlockDeviceOpener {
	mock := &MockBlockDeviceOpener{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceOpener) EXPECT() *MockBlockDeviceOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockBlockDeviceOpener) Open(name string, flag int) (utils.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name, flag)
	ret0, _ := ret[0].(utils.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockBlockDeviceOpenerMockRecorder) Open(name, flag any) *MockBlockDeviceOpenerOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBlockDeviceOpener)(nil).Open), name, flag)
	return &MockBlockDeviceOpenerOpenCall{Call: call}
}

// MockBlockDeviceOpenerOpenCall wrap *gomock.Call
type MockBlockDeviceOpenerOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeviceOpenerOpenCall) Return(arg0 utils.BlockDevice, arg1 error) *MockBlockDeviceOpenerOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeviceOpenerOpenCall) Do(f func(string, int) (utils.BlockDevice, error)) *MockBlockDeviceOpenerOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeviceOpenerOpenCall) DoAndReturn(f func(string, int) (utils.BlockDevice, error)) *MockBlockDeviceOpenerOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCommands is a mock of Commands interface.
type MockCommands struct {
	ctrl     *gomock.Controller
	recorder *MockCommandsMockRecorder
	isgomock struct{}
}

// MockCommandsMockRecorder is the mock recorder for MockCommands.
type MockCommandsMockRecorder struct {
	mock *MockCommands
}

// NewMockCommands creates a new mock instance.
func NewMockCommands(ctrl *gomock.Controller) *MockCommands {
	mock := &MockCommands{ctrl: ctrl}
	mock.recorder = &MockCommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommands) EXPECT() *MockCommandsMockRecorder {
	return m.recorder
}

// CreatePV mocks base method.
func (m *MockCommands) CreatePV(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePV", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePV indicates an expected call of CreatePV.
func (mr *MockCommandsMockRecorder) CreatePV(path any) *MockCommandsCreatePVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePV", reflect.TypeOf((*MockCommands)(nil).CreatePV), path)
	return &MockCommandsCreatePVCall{Call: call}
}

// MockCommandsCreatePVCall wrap *gomock.Call
type MockCommandsCreatePVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreatePVCall) Return(arg0 string, arg1 error) *MockCommandsCreatePVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreatePVCall) Do(f func(string) (string, error)) *MockCommandsCreatePVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreatePVCall) DoAndReturn(f func(string) (string, error)) *MockCommandsCreatePVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThickLogicalVolume mocks base method.
func (m *MockCommands) CreateThickLogicalVolume(vgName, lvName string, size int64, contiguous bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThickLogicalVolume", vgName, lvName, size, contiguous)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThickLogicalVolume indicates an expected call of CreateThickLogicalVolume.
func (mr *MockCommandsMockRecorder) CreateThickLogicalVolume(vgName, lvName, size, contiguous any) *MockCommandsCreateThickLogicalVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThickLogicalVolume", reflect.TypeOf((*MockCommands)(nil).CreateThickLogicalVolume), vgName, lvName, size, contiguous)
	return &MockCommandsCreateThickLogicalVolumeCall{Call: call}
}

// MockCommandsCreateThickLogicalVolumeCall wrap *gomock.Call
type MockCommandsCreateThickLogicalVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThickLogicalVolumeCall) Return(arg0 string, arg1 error) *MockCommandsCreateThickLogicalVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThickLogicalVolumeCall) Do(f func(string, string, int64, bool) (string, error)) *MockCommandsCreateThickLogicalVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThickLogicalVolumeCall) DoAndReturn(f func(string, string, int64, bool) (string, error)) *MockCommandsCreateThickLogicalVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThinLogicalVolume mocks base method.
func (m *MockCommands) CreateThinLogicalVolume(vgName, tpName, lvName string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolume", vgName, tpName, lvName, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolume indicates an expected call of CreateThinLogicalVolume.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolume(vgName, tpName, lvName, size any) *MockCommandsCreateThinLogicalVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolume", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolume), vgName, tpName, lvName, size)
	return &MockCommandsCreateThinLogicalVolumeCall{Call: call}
}

// MockCommandsCreateThinLogicalVolumeCall wrap *gomock.Call
type MockCommandsCreateThinLogicalVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThinLogicalVolumeCall) Return(arg0 string, arg1 error) *MockCommandsCreateThinLogicalVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThinLogicalVolumeCall) Do(f func(string, string, string, int64) (string, error)) *MockCommandsCreateThinLogicalVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThinLogicalVolumeCall) DoAndReturn(f func(string, string, string, int64) (string, error)) *MockCommandsCreateThinLogicalVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThinLogicalVolumeFromSource mocks base method.
func (m *MockCommands) CreateThinLogicalVolumeFromSource(name, sourceVgName, sourceName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolumeFromSource", name, sourceVgName, sourceName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolumeFromSource indicates an expected call of CreateThinLogicalVolumeFromSource.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolumeFromSource(name, sourceVgName, sourceName any) *MockCommandsCreateThinLogicalVolumeFromSourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolumeFromSource", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolumeFromSource), name, sourceVgName, sourceName)
	return &MockCommandsCreateThinLogicalVolumeFromSourceCall{Call: call}
}

// MockCommandsCreateThinLogicalVolumeFromSourceCall wrap *gomock.Call
type MockCommandsCreateThinLogicalVolumeFromSourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThinLogicalVolumeFromSourceCall) Return(arg0 string, arg1 error) *MockCommandsCreateThinLogicalVolumeFromSourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThinLogicalVolumeFromSourceCall) Do(f func(string, string, string) (string, error)) *MockCommandsCreateThinLogicalVolumeFromSourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThinLogicalVolumeFromSourceCall) DoAndReturn(f func(string, string, string) (string, error)) *MockCommandsCreateThinLogicalVolumeFromSourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThinLogicalVolumeSnapshot mocks base method.
func (m *MockCommands) CreateThinLogicalVolumeSnapshot(name, sourceVgName, sourceName string, tags []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinLogicalVolumeSnapshot", name, sourceVgName, sourceName, tags)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinLogicalVolumeSnapshot indicates an expected call of CreateThinLogicalVolumeSnapshot.
func (mr *MockCommandsMockRecorder) CreateThinLogicalVolumeSnapshot(name, sourceVgName, sourceName, tags any) *MockCommandsCreateThinLogicalVolumeSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinLogicalVolumeSnapshot", reflect.TypeOf((*MockCommands)(nil).CreateThinLogicalVolumeSnapshot), name, sourceVgName, sourceName, tags)
	return &MockCommandsCreateThinLogicalVolumeSnapshotCall{Call: call}
}

// MockCommandsCreateThinLogicalVolumeSnapshotCall wrap *gomock.Call
type MockCommandsCreateThinLogicalVolumeSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThinLogicalVolumeSnapshotCall) Return(arg0 string, arg1 error) *MockCommandsCreateThinLogicalVolumeSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThinLogicalVolumeSnapshotCall) Do(f func(string, string, string, []string) (string, error)) *MockCommandsCreateThinLogicalVolumeSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThinLogicalVolumeSnapshotCall) DoAndReturn(f func(string, string, string, []string) (string, error)) *MockCommandsCreateThinLogicalVolumeSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThinPool mocks base method.
func (m *MockCommands) CreateThinPool(thinPoolName, vgName string, size int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinPool", thinPoolName, vgName, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinPool indicates an expected call of CreateThinPool.
func (mr *MockCommandsMockRecorder) CreateThinPool(thinPoolName, vgName, size any) *MockCommandsCreateThinPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinPool", reflect.TypeOf((*MockCommands)(nil).CreateThinPool), thinPoolName, vgName, size)
	return &MockCommandsCreateThinPoolCall{Call: call}
}

// MockCommandsCreateThinPoolCall wrap *gomock.Call
type MockCommandsCreateThinPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThinPoolCall) Return(arg0 string, arg1 error) *MockCommandsCreateThinPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThinPoolCall) Do(f func(string, string, int64) (string, error)) *MockCommandsCreateThinPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThinPoolCall) DoAndReturn(f func(string, string, int64) (string, error)) *MockCommandsCreateThinPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateThinPoolFullVGSpace mocks base method.
func (m *MockCommands) CreateThinPoolFullVGSpace(thinPoolName, vgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThinPoolFullVGSpace", thinPoolName, vgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateThinPoolFullVGSpace indicates an expected call of CreateThinPoolFullVGSpace.
func (mr *MockCommandsMockRecorder) CreateThinPoolFullVGSpace(thinPoolName, vgName any) *MockCommandsCreateThinPoolFullVGSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThinPoolFullVGSpace", reflect.TypeOf((*MockCommands)(nil).CreateThinPoolFullVGSpace), thinPoolName, vgName)
	return &MockCommandsCreateThinPoolFullVGSpaceCall{Call: call}
}

// MockCommandsCreateThinPoolFullVGSpaceCall wrap *gomock.Call
type MockCommandsCreateThinPoolFullVGSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateThinPoolFullVGSpaceCall) Return(arg0 string, arg1 error) *MockCommandsCreateThinPoolFullVGSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateThinPoolFullVGSpaceCall) Do(f func(string, string) (string, error)) *MockCommandsCreateThinPoolFullVGSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateThinPoolFullVGSpaceCall) DoAndReturn(f func(string, string) (string, error)) *MockCommandsCreateThinPoolFullVGSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVGLocal mocks base method.
func (m *MockCommands) CreateVGLocal(vgName, lvmVolumeGroupName string, pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVGLocal", vgName, lvmVolumeGroupName, pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVGLocal indicates an expected call of CreateVGLocal.
func (mr *MockCommandsMockRecorder) CreateVGLocal(vgName, lvmVolumeGroupName, pvNames any) *MockCommandsCreateVGLocalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVGLocal", reflect.TypeOf((*MockCommands)(nil).CreateVGLocal), vgName, lvmVolumeGroupName, pvNames)
	return &MockCommandsCreateVGLocalCall{Call: call}
}

// MockCommandsCreateVGLocalCall wrap *gomock.Call
type MockCommandsCreateVGLocalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateVGLocalCall) Return(arg0 string, arg1 error) *MockCommandsCreateVGLocalCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateVGLocalCall) Do(f func(string, string, []string) (string, error)) *MockCommandsCreateVGLocalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateVGLocalCall) DoAndReturn(f func(string, string, []string) (string, error)) *MockCommandsCreateVGLocalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateVGShared mocks base method.
func (m *MockCommands) CreateVGShared(vgName, lvmVolumeGroupName string, pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVGShared", vgName, lvmVolumeGroupName, pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVGShared indicates an expected call of CreateVGShared.
func (mr *MockCommandsMockRecorder) CreateVGShared(vgName, lvmVolumeGroupName, pvNames any) *MockCommandsCreateVGSharedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVGShared", reflect.TypeOf((*MockCommands)(nil).CreateVGShared), vgName, lvmVolumeGroupName, pvNames)
	return &MockCommandsCreateVGSharedCall{Call: call}
}

// MockCommandsCreateVGSharedCall wrap *gomock.Call
type MockCommandsCreateVGSharedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsCreateVGSharedCall) Return(arg0 string, arg1 error) *MockCommandsCreateVGSharedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsCreateVGSharedCall) Do(f func(string, string, []string) (string, error)) *MockCommandsCreateVGSharedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsCreateVGSharedCall) DoAndReturn(f func(string, string, []string) (string, error)) *MockCommandsCreateVGSharedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtendLV mocks base method.
func (m *MockCommands) ExtendLV(size int64, vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLV", size, vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendLV indicates an expected call of ExtendLV.
func (mr *MockCommandsMockRecorder) ExtendLV(size, vgName, lvName any) *MockCommandsExtendLVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLV", reflect.TypeOf((*MockCommands)(nil).ExtendLV), size, vgName, lvName)
	return &MockCommandsExtendLVCall{Call: call}
}

// MockCommandsExtendLVCall wrap *gomock.Call
type MockCommandsExtendLVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsExtendLVCall) Return(arg0 string, arg1 error) *MockCommandsExtendLVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsExtendLVCall) Do(f func(int64, string, string) (string, error)) *MockCommandsExtendLVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsExtendLVCall) DoAndReturn(f func(int64, string, string) (string, error)) *MockCommandsExtendLVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtendLVFullVGSpace mocks base method.
func (m *MockCommands) ExtendLVFullVGSpace(vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendLVFullVGSpace", vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendLVFullVGSpace indicates an expected call of ExtendLVFullVGSpace.
func (mr *MockCommandsMockRecorder) ExtendLVFullVGSpace(vgName, lvName any) *MockCommandsExtendLVFullVGSpaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendLVFullVGSpace", reflect.TypeOf((*MockCommands)(nil).ExtendLVFullVGSpace), vgName, lvName)
	return &MockCommandsExtendLVFullVGSpaceCall{Call: call}
}

// MockCommandsExtendLVFullVGSpaceCall wrap *gomock.Call
type MockCommandsExtendLVFullVGSpaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsExtendLVFullVGSpaceCall) Return(arg0 string, arg1 error) *MockCommandsExtendLVFullVGSpaceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsExtendLVFullVGSpaceCall) Do(f func(string, string) (string, error)) *MockCommandsExtendLVFullVGSpaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsExtendLVFullVGSpaceCall) DoAndReturn(f func(string, string) (string, error)) *MockCommandsExtendLVFullVGSpaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExtendVG mocks base method.
func (m *MockCommands) ExtendVG(vgName string, paths []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendVG", vgName, paths)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVG indicates an expected call of ExtendVG.
func (mr *MockCommandsMockRecorder) ExtendVG(vgName, paths any) *MockCommandsExtendVGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVG", reflect.TypeOf((*MockCommands)(nil).ExtendVG), vgName, paths)
	return &MockCommandsExtendVGCall{Call: call}
}

// MockCommandsExtendVGCall wrap *gomock.Call
type MockCommandsExtendVGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsExtendVGCall) Return(arg0 string, arg1 error) *MockCommandsExtendVGCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsExtendVGCall) Do(f func(string, []string) (string, error)) *MockCommandsExtendVGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsExtendVGCall) DoAndReturn(f func(string, []string) (string, error)) *MockCommandsExtendVGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllLVs mocks base method.
func (m *MockCommands) GetAllLVs(ctx context.Context) ([]internal.LVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLVs", ctx)
	ret0, _ := ret[0].([]internal.LVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllLVs indicates an expected call of GetAllLVs.
func (mr *MockCommandsMockRecorder) GetAllLVs(ctx any) *MockCommandsGetAllLVsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLVs", reflect.TypeOf((*MockCommands)(nil).GetAllLVs), ctx)
	return &MockCommandsGetAllLVsCall{Call: call}
}

// MockCommandsGetAllLVsCall wrap *gomock.Call
type MockCommandsGetAllLVsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetAllLVsCall) Return(data []internal.LVData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetAllLVsCall {
	c.Call = c.Call.Return(data, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetAllLVsCall) Do(f func(context.Context) ([]internal.LVData, string, bytes.Buffer, error)) *MockCommandsGetAllLVsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetAllLVsCall) DoAndReturn(f func(context.Context) ([]internal.LVData, string, bytes.Buffer, error)) *MockCommandsGetAllLVsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllPVs mocks base method.
func (m *MockCommands) GetAllPVs(ctx context.Context) ([]internal.PVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPVs", ctx)
	ret0, _ := ret[0].([]internal.PVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllPVs indicates an expected call of GetAllPVs.
func (mr *MockCommandsMockRecorder) GetAllPVs(ctx any) *MockCommandsGetAllPVsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPVs", reflect.TypeOf((*MockCommands)(nil).GetAllPVs), ctx)
	return &MockCommandsGetAllPVsCall{Call: call}
}

// MockCommandsGetAllPVsCall wrap *gomock.Call
type MockCommandsGetAllPVsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetAllPVsCall) Return(data []internal.PVData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetAllPVsCall {
	c.Call = c.Call.Return(data, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetAllPVsCall) Do(f func(context.Context) ([]internal.PVData, string, bytes.Buffer, error)) *MockCommandsGetAllPVsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetAllPVsCall) DoAndReturn(f func(context.Context) ([]internal.PVData, string, bytes.Buffer, error)) *MockCommandsGetAllPVsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllVGs mocks base method.
func (m *MockCommands) GetAllVGs(ctx context.Context) ([]internal.VGData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVGs", ctx)
	ret0, _ := ret[0].([]internal.VGData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllVGs indicates an expected call of GetAllVGs.
func (mr *MockCommandsMockRecorder) GetAllVGs(ctx any) *MockCommandsGetAllVGsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVGs", reflect.TypeOf((*MockCommands)(nil).GetAllVGs), ctx)
	return &MockCommandsGetAllVGsCall{Call: call}
}

// MockCommandsGetAllVGsCall wrap *gomock.Call
type MockCommandsGetAllVGsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetAllVGsCall) Return(data []internal.VGData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetAllVGsCall {
	c.Call = c.Call.Return(data, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetAllVGsCall) Do(f func(context.Context) ([]internal.VGData, string, bytes.Buffer, error)) *MockCommandsGetAllVGsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetAllVGsCall) DoAndReturn(f func(context.Context) ([]internal.VGData, string, bytes.Buffer, error)) *MockCommandsGetAllVGsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockDevices mocks base method.
func (m *MockCommands) GetBlockDevices(ctx context.Context) ([]internal.Device, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDevices", ctx)
	ret0, _ := ret[0].([]internal.Device)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetBlockDevices indicates an expected call of GetBlockDevices.
func (mr *MockCommandsMockRecorder) GetBlockDevices(ctx any) *MockCommandsGetBlockDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDevices", reflect.TypeOf((*MockCommands)(nil).GetBlockDevices), ctx)
	return &MockCommandsGetBlockDevicesCall{Call: call}
}

// MockCommandsGetBlockDevicesCall wrap *gomock.Call
type MockCommandsGetBlockDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetBlockDevicesCall) Return(arg0 []internal.Device, arg1 string, arg2 bytes.Buffer, arg3 error) *MockCommandsGetBlockDevicesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetBlockDevicesCall) Do(f func(context.Context) ([]internal.Device, string, bytes.Buffer, error)) *MockCommandsGetBlockDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetBlockDevicesCall) DoAndReturn(f func(context.Context) ([]internal.Device, string, bytes.Buffer, error)) *MockCommandsGetBlockDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLV mocks base method.
func (m *MockCommands) GetLV(vgName, lvName string) (internal.LVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLV", vgName, lvName)
	ret0, _ := ret[0].(internal.LVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetLV indicates an expected call of GetLV.
func (mr *MockCommandsMockRecorder) GetLV(vgName, lvName any) *MockCommandsGetLVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLV", reflect.TypeOf((*MockCommands)(nil).GetLV), vgName, lvName)
	return &MockCommandsGetLVCall{Call: call}
}

// MockCommandsGetLVCall wrap *gomock.Call
type MockCommandsGetLVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetLVCall) Return(lvData internal.LVData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetLVCall {
	c.Call = c.Call.Return(lvData, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetLVCall) Do(f func(string, string) (internal.LVData, string, bytes.Buffer, error)) *MockCommandsGetLVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetLVCall) DoAndReturn(f func(string, string) (internal.LVData, string, bytes.Buffer, error)) *MockCommandsGetLVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPV mocks base method.
func (m *MockCommands) GetPV(pvName string) (internal.PVData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPV", pvName)
	ret0, _ := ret[0].(internal.PVData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPV indicates an expected call of GetPV.
func (mr *MockCommandsMockRecorder) GetPV(pvName any) *MockCommandsGetPVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPV", reflect.TypeOf((*MockCommands)(nil).GetPV), pvName)
	return &MockCommandsGetPVCall{Call: call}
}

// MockCommandsGetPVCall wrap *gomock.Call
type MockCommandsGetPVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetPVCall) Return(pvData internal.PVData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetPVCall {
	c.Call = c.Call.Return(pvData, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetPVCall) Do(f func(string) (internal.PVData, string, bytes.Buffer, error)) *MockCommandsGetPVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetPVCall) DoAndReturn(f func(string) (internal.PVData, string, bytes.Buffer, error)) *MockCommandsGetPVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVG mocks base method.
func (m *MockCommands) GetVG(vgName string) (internal.VGData, string, bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVG", vgName)
	ret0, _ := ret[0].(internal.VGData)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bytes.Buffer)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetVG indicates an expected call of GetVG.
func (mr *MockCommandsMockRecorder) GetVG(vgName any) *MockCommandsGetVGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVG", reflect.TypeOf((*MockCommands)(nil).GetVG), vgName)
	return &MockCommandsGetVGCall{Call: call}
}

// MockCommandsGetVGCall wrap *gomock.Call
type MockCommandsGetVGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsGetVGCall) Return(vgData internal.VGData, command string, stdErr bytes.Buffer, err error) *MockCommandsGetVGCall {
	c.Call = c.Call.Return(vgData, command, stdErr, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsGetVGCall) Do(f func(string) (internal.VGData, string, bytes.Buffer, error)) *MockCommandsGetVGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsGetVGCall) DoAndReturn(f func(string) (internal.VGData, string, bytes.Buffer, error)) *MockCommandsGetVGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LVChangeDelTag mocks base method.
func (m *MockCommands) LVChangeDelTag(lv internal.LVData, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LVChangeDelTag", lv, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LVChangeDelTag indicates an expected call of LVChangeDelTag.
func (mr *MockCommandsMockRecorder) LVChangeDelTag(lv, tag any) *MockCommandsLVChangeDelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LVChangeDelTag", reflect.TypeOf((*MockCommands)(nil).LVChangeDelTag), lv, tag)
	return &MockCommandsLVChangeDelTagCall{Call: call}
}

// MockCommandsLVChangeDelTagCall wrap *gomock.Call
type MockCommandsLVChangeDelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsLVChangeDelTagCall) Return(arg0 string, arg1 error) *MockCommandsLVChangeDelTagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsLVChangeDelTagCall) Do(f func(internal.LVData, string) (string, error)) *MockCommandsLVChangeDelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsLVChangeDelTagCall) DoAndReturn(f func(internal.LVData, string) (string, error)) *MockCommandsLVChangeDelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReTag mocks base method.
func (m *MockCommands) ReTag(ctx context.Context, log logger.Logger, metrics monitoring.Metrics, ctrlName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReTag", ctx, log, metrics, ctrlName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReTag indicates an expected call of ReTag.
func (mr *MockCommandsMockRecorder) ReTag(ctx, log, metrics, ctrlName any) *MockCommandsReTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReTag", reflect.TypeOf((*MockCommands)(nil).ReTag), ctx, log, metrics, ctrlName)
	return &MockCommandsReTagCall{Call: call}
}

// MockCommandsReTagCall wrap *gomock.Call
type MockCommandsReTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsReTagCall) Return(arg0 error) *MockCommandsReTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsReTagCall) Do(f func(context.Context, logger.Logger, monitoring.Metrics, string) error) *MockCommandsReTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsReTagCall) DoAndReturn(f func(context.Context, logger.Logger, monitoring.Metrics, string) error) *MockCommandsReTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveLV mocks base method.
func (m *MockCommands) RemoveLV(vgName, lvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLV", vgName, lvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLV indicates an expected call of RemoveLV.
func (mr *MockCommandsMockRecorder) RemoveLV(vgName, lvName any) *MockCommandsRemoveLVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLV", reflect.TypeOf((*MockCommands)(nil).RemoveLV), vgName, lvName)
	return &MockCommandsRemoveLVCall{Call: call}
}

// MockCommandsRemoveLVCall wrap *gomock.Call
type MockCommandsRemoveLVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsRemoveLVCall) Return(arg0 string, arg1 error) *MockCommandsRemoveLVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsRemoveLVCall) Do(f func(string, string) (string, error)) *MockCommandsRemoveLVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsRemoveLVCall) DoAndReturn(f func(string, string) (string, error)) *MockCommandsRemoveLVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemovePV mocks base method.
func (m *MockCommands) RemovePV(pvNames []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePV", pvNames)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePV indicates an expected call of RemovePV.
func (mr *MockCommandsMockRecorder) RemovePV(pvNames any) *MockCommandsRemovePVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePV", reflect.TypeOf((*MockCommands)(nil).RemovePV), pvNames)
	return &MockCommandsRemovePVCall{Call: call}
}

// MockCommandsRemovePVCall wrap *gomock.Call
type MockCommandsRemovePVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsRemovePVCall) Return(arg0 string, arg1 error) *MockCommandsRemovePVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsRemovePVCall) Do(f func([]string) (string, error)) *MockCommandsRemovePVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsRemovePVCall) DoAndReturn(f func([]string) (string, error)) *MockCommandsRemovePVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVG mocks base method.
func (m *MockCommands) RemoveVG(vgName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVG", vgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVG indicates an expected call of RemoveVG.
func (mr *MockCommandsMockRecorder) RemoveVG(vgName any) *MockCommandsRemoveVGCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVG", reflect.TypeOf((*MockCommands)(nil).RemoveVG), vgName)
	return &MockCommandsRemoveVGCall{Call: call}
}

// MockCommandsRemoveVGCall wrap *gomock.Call
type MockCommandsRemoveVGCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsRemoveVGCall) Return(arg0 string, arg1 error) *MockCommandsRemoveVGCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsRemoveVGCall) Do(f func(string) (string, error)) *MockCommandsRemoveVGCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsRemoveVGCall) DoAndReturn(f func(string) (string, error)) *MockCommandsRemoveVGCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResizePV mocks base method.
func (m *MockCommands) ResizePV(pvName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizePV", pvName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizePV indicates an expected call of ResizePV.
func (mr *MockCommandsMockRecorder) ResizePV(pvName any) *MockCommandsResizePVCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizePV", reflect.TypeOf((*MockCommands)(nil).ResizePV), pvName)
	return &MockCommandsResizePVCall{Call: call}
}

// MockCommandsResizePVCall wrap *gomock.Call
type MockCommandsResizePVCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsResizePVCall) Return(arg0 string, arg1 error) *MockCommandsResizePVCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsResizePVCall) Do(f func(string) (string, error)) *MockCommandsResizePVCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsResizePVCall) DoAndReturn(f func(string) (string, error)) *MockCommandsResizePVCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnmarshalDevices mocks base method.
func (m *MockCommands) UnmarshalDevices(out []byte) ([]internal.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalDevices", out)
	ret0, _ := ret[0].([]internal.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalDevices indicates an expected call of UnmarshalDevices.
func (mr *MockCommandsMockRecorder) UnmarshalDevices(out any) *MockCommandsUnmarshalDevicesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalDevices", reflect.TypeOf((*MockCommands)(nil).UnmarshalDevices), out)
	return &MockCommandsUnmarshalDevicesCall{Call: call}
}

// MockCommandsUnmarshalDevicesCall wrap *gomock.Call
type MockCommandsUnmarshalDevicesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsUnmarshalDevicesCall) Return(arg0 []internal.Device, arg1 error) *MockCommandsUnmarshalDevicesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsUnmarshalDevicesCall) Do(f func([]byte) ([]internal.Device, error)) *MockCommandsUnmarshalDevicesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsUnmarshalDevicesCall) DoAndReturn(f func([]byte) ([]internal.Device, error)) *MockCommandsUnmarshalDevicesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VGChangeAddTag mocks base method.
func (m *MockCommands) VGChangeAddTag(vGName, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGChangeAddTag", vGName, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VGChangeAddTag indicates an expected call of VGChangeAddTag.
func (mr *MockCommandsMockRecorder) VGChangeAddTag(vGName, tag any) *MockCommandsVGChangeAddTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGChangeAddTag", reflect.TypeOf((*MockCommands)(nil).VGChangeAddTag), vGName, tag)
	return &MockCommandsVGChangeAddTagCall{Call: call}
}

// MockCommandsVGChangeAddTagCall wrap *gomock.Call
type MockCommandsVGChangeAddTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsVGChangeAddTagCall) Return(arg0 string, arg1 error) *MockCommandsVGChangeAddTagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsVGChangeAddTagCall) Do(f func(string, string) (string, error)) *MockCommandsVGChangeAddTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsVGChangeAddTagCall) DoAndReturn(f func(string, string) (string, error)) *MockCommandsVGChangeAddTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VGChangeDelTag mocks base method.
func (m *MockCommands) VGChangeDelTag(vGName, tag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VGChangeDelTag", vGName, tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VGChangeDelTag indicates an expected call of VGChangeDelTag.
func (mr *MockCommandsMockRecorder) VGChangeDelTag(vGName, tag any) *MockCommandsVGChangeDelTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VGChangeDelTag", reflect.TypeOf((*MockCommands)(nil).VGChangeDelTag), vGName, tag)
	return &MockCommandsVGChangeDelTagCall{Call: call}
}

// MockCommandsVGChangeDelTagCall wrap *gomock.Call
type MockCommandsVGChangeDelTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommandsVGChangeDelTagCall) Return(arg0 string, arg1 error) *MockCommandsVGChangeDelTagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommandsVGChangeDelTagCall) Do(f func(string, string) (string, error)) *MockCommandsVGChangeDelTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommandsVGChangeDelTagCall) DoAndReturn(f func(string, string) (string, error)) *MockCommandsVGChangeDelTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
