// Code generated by MockGen. DO NOT EDIT.
// Source: agent/internal/utils (interfaces: SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener)
//
// Generated by this command:
//
//	mockgen -write_generate_directive agent/internal/utils SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	utils "agent/internal/utils"
	fs "io/fs"
	reflect "reflect"
	syscall "syscall"

	gomock "go.uber.org/mock/gomock"
	unix "golang.org/x/sys/unix"
)

//go:generate mockgen -write_generate_directive agent/internal/utils SysCall,BlockDevice,File,FileOpener,BlockDeviceOpener

// MockSysCall is a mock of SysCall interface.
type MockSysCall struct {
	ctrl     *gomock.Controller
	recorder *MockSysCallMockRecorder
	isgomock struct{}
}

// MockSysCallMockRecorder is the mock recorder for MockSysCall.
type MockSysCallMockRecorder struct {
	mock *MockSysCall
}

// NewMockSysCall creates a new mock instance.
func NewMockSysCall(ctrl *gomock.Controller) *MockSysCall {
	mock := &MockSysCall{ctrl: ctrl}
	mock.recorder = &MockSysCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysCall) EXPECT() *MockSysCallMockRecorder {
	return m.recorder
}

// Blkdiscard mocks base method.
func (m *MockSysCall) Blkdiscard(fd uintptr, start, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blkdiscard", fd, start, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blkdiscard indicates an expected call of Blkdiscard.
func (mr *MockSysCallMockRecorder) Blkdiscard(fd, start, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blkdiscard", reflect.TypeOf((*MockSysCall)(nil).Blkdiscard), fd, start, count)
}

// Fstat mocks base method.
func (m *MockSysCall) Fstat(fd int, stat *unix.Stat_t) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fstat", fd, stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fstat indicates an expected call of Fstat.
func (mr *MockSysCallMockRecorder) Fstat(fd, stat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fstat", reflect.TypeOf((*MockSysCall)(nil).Fstat), fd, stat)
}

// Syscall mocks base method.
func (m *MockSysCall) Syscall(trap, a1, a2, a3 uintptr) (uintptr, uintptr, syscall.Errno) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syscall", trap, a1, a2, a3)
	ret0, _ := ret[0].(uintptr)
	ret1, _ := ret[1].(uintptr)
	ret2, _ := ret[2].(syscall.Errno)
	return ret0, ret1, ret2
}

// Syscall indicates an expected call of Syscall.
func (mr *MockSysCallMockRecorder) Syscall(trap, a1, a2, a3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syscall", reflect.TypeOf((*MockSysCall)(nil).Syscall), trap, a1, a2, a3)
}

// MockBlockDevice is a mock of BlockDevice interface.
type MockBlockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceMockRecorder
	isgomock struct{}
}

// MockBlockDeviceMockRecorder is the mock recorder for MockBlockDevice.
type MockBlockDeviceMockRecorder struct {
	mock *MockBlockDevice
}

// NewMockBlockDevice creates a new mock instance.
func NewMockBlockDevice(ctrl *gomock.Controller) *MockBlockDevice {
	mock := &MockBlockDevice{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDevice) EXPECT() *MockBlockDeviceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBlockDevice) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlockDeviceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockDevice)(nil).Close))
}

// Discard mocks base method.
func (m *MockBlockDevice) Discard(start, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", start, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockBlockDeviceMockRecorder) Discard(start, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockBlockDevice)(nil).Discard), start, count)
}

// Fd mocks base method.
func (m *MockBlockDevice) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockBlockDeviceMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockBlockDevice)(nil).Fd))
}

// Name mocks base method.
func (m *MockBlockDevice) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBlockDeviceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBlockDevice)(nil).Name))
}

// Read mocks base method.
func (m *MockBlockDevice) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBlockDeviceMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBlockDevice)(nil).Read), p)
}

// ReadAt mocks base method.
func (m *MockBlockDevice) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockBlockDeviceMockRecorder) ReadAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockBlockDevice)(nil).ReadAt), p, off)
}

// Seek mocks base method.
func (m *MockBlockDevice) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockBlockDeviceMockRecorder) Seek(offset, whence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockBlockDevice)(nil).Seek), offset, whence)
}

// Size mocks base method.
func (m *MockBlockDevice) Size() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockBlockDeviceMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBlockDevice)(nil).Size))
}

// WriteAt mocks base method.
func (m *MockBlockDevice) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockBlockDeviceMockRecorder) WriteAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockBlockDevice)(nil).WriteAt), p, off)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Fd mocks base method.
func (m *MockFile) Fd() uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fd")
	ret0, _ := ret[0].(uintptr)
	return ret0
}

// Fd indicates an expected call of Fd.
func (mr *MockFileMockRecorder) Fd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fd", reflect.TypeOf((*MockFile)(nil).Fd))
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Read mocks base method.
func (m *MockFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), p)
}

// ReadAt mocks base method.
func (m *MockFile) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockFileMockRecorder) ReadAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFile)(nil).ReadAt), p, off)
}

// Seek mocks base method.
func (m *MockFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockFileMockRecorder) Seek(offset, whence any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFile)(nil).Seek), offset, whence)
}

// WriteAt mocks base method.
func (m *MockFile) WriteAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt.
func (mr *MockFileMockRecorder) WriteAt(p, off any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFile)(nil).WriteAt), p, off)
}

// MockFileOpener is a mock of FileOpener interface.
type MockFileOpener struct {
	ctrl     *gomock.Controller
	recorder *MockFileOpenerMockRecorder
	isgomock struct{}
}

// MockFileOpenerMockRecorder is the mock recorder for MockFileOpener.
type MockFileOpenerMockRecorder struct {
	mock *MockFileOpener
}

// NewMockFileOpener creates a new mock instance.
func NewMockFileOpener(ctrl *gomock.Controller) *MockFileOpener {
	mock := &MockFileOpener{ctrl: ctrl}
	mock.recorder = &MockFileOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOpener) EXPECT() *MockFileOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockFileOpener) Open(name string, flag int, mode fs.FileMode) (utils.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name, flag, mode)
	ret0, _ := ret[0].(utils.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileOpenerMockRecorder) Open(name, flag, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileOpener)(nil).Open), name, flag, mode)
}

// MockBlockDeviceOpener is a mock of BlockDeviceOpener interface.
type MockBlockDeviceOpener struct {
	ctrl     *gomock.Controller
	recorder *MockBlockDeviceOpenerMockRecorder
	isgomock struct{}
}

// MockBlockDeviceOpenerMockRecorder is the mock recorder for MockBlockDeviceOpener.
type MockBlockDeviceOpenerMockRecorder struct {
	mock *MockBlockDeviceOpener
}

// NewMockBlockDeviceOpener creates a new mock instance.
func NewMockBlockDeviceOpener(ctrl *gomock.Controller) *MockBlockDeviceOpener {
	mock := &MockBlockDeviceOpener{ctrl: ctrl}
	mock.recorder = &MockBlockDeviceOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockDeviceOpener) EXPECT() *MockBlockDeviceOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockBlockDeviceOpener) Open(name string, flag int) (utils.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name, flag)
	ret0, _ := ret[0].(utils.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockBlockDeviceOpenerMockRecorder) Open(name, flag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockBlockDeviceOpener)(nil).Open), name, flag)
}
